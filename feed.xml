<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://carbone13.github.io//</id><title>Carbone_13 | Blog</title><subtitle>Récit de mes péripéties sur Unity</subtitle> <updated>2021-04-10T23:34:21+02:00</updated> <author> <name>Lucas Michaudel</name> <uri>https://carbone13.github.io//</uri> </author><link rel="self" type="application/atom+xml" href="https://carbone13.github.io//feed.xml"/><link rel="alternate" type="text/html" hreflang="fr-FR" href="https://carbone13.github.io//"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 Lucas Michaudel </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>[3/3] Réaliser sa propre physique pour du Pixel Art</title><link href="https://carbone13.github.io//posts/Pixel-perfect-physics-3/" rel="alternate" type="text/html" title="[3/3] Réaliser sa propre physique pour du Pixel Art" /><published>2021-04-10T00:00:00+02:00</published> <updated>2021-04-10T23:33:56+02:00</updated> <id>https://carbone13.github.io//posts/Pixel-perfect-physics-3/</id> <content src="https://carbone13.github.io//posts/Pixel-perfect-physics-3/" /> <author> <name>Lucas Michaudel</name> </author> <category term="2D" /> <category term="Physic" /> <summary> [3/3] Les Solides Maintenant que nous en avons terminé avec les Acteurs, il est temps de s’attaquer au deuxième type d’entité : les Solides. Ce que j’appelle un Solide, c’est une entité qui se déplace de façon impartiale, sans prendre en compte sans environnement. La seule chose qu’un Solide fait, c’est de pousser les Acteurs sur son chemin, on alors de déplacer les Acteurs avec lui s’ils r... </summary> </entry> <entry><title>[2/3] Réaliser sa propre physique pour du Pixel Art</title><link href="https://carbone13.github.io//posts/Pixel-perfect-physics-2/" rel="alternate" type="text/html" title="[2/3] Réaliser sa propre physique pour du Pixel Art" /><published>2021-04-09T00:00:00+02:00</published> <updated>2021-04-10T23:33:56+02:00</updated> <id>https://carbone13.github.io//posts/Pixel-perfect-physics-2/</id> <content src="https://carbone13.github.io//posts/Pixel-perfect-physics-2/" /> <author> <name>Lucas Michaudel</name> </author> <category term="2D" /> <category term="Physic" /> <summary> [2/3] Les Acteurs Dans le précédent article, j’ai plusieurs fois parler d’Acteur, en fait un Acteur désigne une entité qui va se déplacer dans la scène tout en collisionant avec les autres boîtes de collisions. Par exemple Mario serait un Acteur, un Goomba aussi. Personnellement je crée une class abstraite que j’appelle Actor. Abstraite signifie qu’elle ne peux pas être utiliser comme ça, ... </summary> </entry> <entry><title>[1/3] Réaliser sa propre physique pour du Pixel Art</title><link href="https://carbone13.github.io//posts/Pixel-perfect-physics-1/" rel="alternate" type="text/html" title="[1/3] Réaliser sa propre physique pour du Pixel Art" /><published>2021-04-08T00:00:00+02:00</published> <updated>2021-04-10T23:33:56+02:00</updated> <id>https://carbone13.github.io//posts/Pixel-perfect-physics-1/</id> <content src="https://carbone13.github.io//posts/Pixel-perfect-physics-1/" /> <author> <name>Lucas Michaudel</name> </author> <category term="2D" /> <category term="Physic" /> <summary> [1/3] Intro &amp;amp; AABB Lorsqu’on souhaite réaliser un jeu en 2D sur Unity, on peut se laisser tenter par son système de Physique et de Collisions. Malheureusement il est assez laborieux d’avoir un résultat convaincant avec, surtout lorsqu’on développe un Platformer. Maintenant il est toujours possible d’utiliser la fonction MovePosition() d’un rigidbody, mais le système de collision est asse... </summary> </entry> </feed>
